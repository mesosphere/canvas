/* Triangle */

.triangle-base() {
  border-style: solid;
  content: '';
  display: inline-block;
  height: 0;
  line-height: 0;
  width: 0;
}

.triangle(@direction, @size, @color) {
  .triangle(@direction, @size * 2, @size, @color);
}

.triangle(@direction, @width, @height, @color) when (@direction = 'up') {
  .triangle-base();
  border-color: transparent transparent @color transparent;
  border-width: 0 (@width / 2) @height (@width / 2);
}

.triangle(@direction, @width, @height, @color) when (@direction = 'down') {
  .triangle-base();
  border-color: @color transparent transparent transparent;
  border-width: @height (@width / 2) 0 (@width / 2);
}

.triangle(@direction, @width, @height, @color) when (@direction = 'left') {
  .triangle-base();
  border-color: transparent @color transparent transparent;
  border-width: (@height / 2) @width (@height / 2) 0;
}

.triangle(@direction, @width, @height, @color) when (@direction = 'right') {
  .triangle-base();
  border-color: transparent transparent transparent @color;
  border-width: (@height / 2) 0 (@height / 2) @width;
}

/* Triangle Size */

.triangle-size (@direction, @width, @height) when (@direction = 'up') {
  border-width: 0 (@width / 2) @height (@width / 2);
}

.triangle-size (@direction, @width, @height) when (@direction = 'down') {
  border-width: @height (@width / 2) 0 (@width / 2);
}

.triangle-size (@direction, @width, @height) when (@direction = 'left') {
  border-width: (@height / 2) @width (@height / 2) 0;
}

.triangle-size (@direction, @width, @height) when (@direction = 'right') {
  border-width: (@height / 2) 0 (@height / 2) @width;
}

.triangle-size-width (@direction, @width) when (@direction = 'down') {
  border-bottom-width: 0;
  border-left-width: @width / 2;
  border-right-width: @width / 2;
}

.triangle-size-height (@direction, @height) when (@direction = 'down') {
  border-bottom-width: 0;
  border-top-width: @height;
}

/* Triangle Color */

.triangle-color(@direction, @color) when (@direction = 'up') {

  & when not (@color = null) {
    border-color: transparent transparent @color transparent;
  }
}

.triangle-color(@direction, @color) when (@direction = 'down') {

  & when not (@color = null) {
    border-color: @color transparent transparent transparent;
  }
}

.triangle-color(@direction, @color) when (@direction = 'left') {

  & when not (@color = null) {
    border-color: transparent @color transparent transparent;
  }
}

.triangle-color(@direction, @color) when (@direction = 'right') {

  & when not (@color = null) {
    border-color: transparent transparent transparent @color;
  }
}

/* Inline SVG Icons */

.inline-svg-background-image(@svgURI) {
  background-image: url(~'data:image/svg+xml;charset=utf8,@{svgURI}');
}

.custom-toggle-indicator-checkbox(@fill) {

  & when not (@fill = null) {
    .inline-svg-background-image(escape(~'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><polygon fill="@{fill}" points="6 12.414 13.707 4.707 12.293 3.293 6 9.600 3.707 7.294 2.294 8.707"></polygon></svg>'));
  }
}

.custom-toggle-indicator-checkbox-indeterminate(@fill) {

  & when not (@fill = null) {
    .inline-svg-background-image(escape(~'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><rect fill="@{fill}" id="Rectangle" x="3" y="7" width="10" height="2"></rect></svg>'));
  }
}

.custom-toggle-indicator-radio-button(@fill) {

  & when not (@fill = null) {
    .inline-svg-background-image(escape(~'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><circle fill="@{fill}" cx="8" cy="8" r="4"></circle></svg>'));
  }
}
