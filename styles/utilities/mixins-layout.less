/*
Element Spacing
--
Using CNVS-specific variable structure, applies padding and margin to an element
specified by the @class variable.  If a @modifier is defined, then added classes
are created to apply the modifier spacing properties in just a single
direction (e.g. h2.short-top).  Similarly, if @screen-size is defined, the
space is adjusted to fit that screen-size, and direction-specific modifier
classes are created just for that screen-size (e.g. h2.short-top-screen-small).
*/

.element-spacing(@class, @modifier, @screen-size) {

  @class-suffix: replace(e('-@{screen-size}'), '-null', '');

  .property-variant(@class, margin-top, @modifier, @screen-size);
  .property-variant(@class, margin-bottom, @modifier, @screen-size);
  .property-variant(@class, margin-left, @modifier, @screen-size);
  .property-variant(@class, margin-right, @modifier, @screen-size);
  .property-variant(@class, padding-top, @modifier, @screen-size);
  .property-variant(@class, padding-bottom, @modifier, @screen-size);
  .property-variant(@class, padding-left, @modifier, @screen-size);
  .property-variant(@class, padding-right, @modifier, @screen-size);

  & when not (@modifier = null) {

    &-top,
    &-top@{class-suffix} {
      .property-variant(@class, margin-top, @modifier, @screen-size);
      .property-variant(@class, padding-top, @modifier, @screen-size);
    }

    &-bottom,
    &-bottom@{class-suffix} {
      .property-variant(@class, margin-bottom, @modifier, @screen-size);
      .property-variant(@class, padding-bottom, @modifier, @screen-size);
    }

    &-left,
    &-left@{class-suffix} {
      .property-variant(@class, margin-left, @modifier, @screen-size);
      .property-variant(@class, padding-left, @modifier, @screen-size);
    }

    &-right,
    &-right@{class-suffix} {
      .property-variant(@class, margin-right, @modifier, @screen-size);
      .property-variant(@class, padding-right, @modifier, @screen-size);
    }
  }
}

/* Property Variant */

.property-variant (@class, @property) {
  .property-variant (@class, @property, @property, null, null);
}

.property-variant (@class, @property, @screen-size) {
  .property-variant (@class, @property, @property, null, @screen-size);
}

.property-variant (@class, @property, @modifier, @screen-size) {
  .property-variant (@class, @property, @property, @modifier, @screen-size);
}

.property-variant (@class, @property, @variable, @modifier, @screen-size) {

  @element-property: e('@{class}-@{variable}');
  @element-property-screen-size: replace(e('@{class}-@{variable}-@{screen-size}'), '-null', '');
  @element-modifier-property-scale: replace(e('@{class}-@{modifier}-@{variable}-scale'), '-null', '');

  & when not (@@element-property = null) {

    & when (@screen-size = null) {

      & when (@modifier = null) {
        @{property}: @@element-property;
      }

      & when not (@modifier = null) {

        & when not (@@element-modifier-property-scale = null) {
          @{property}: @@element-property * @@element-modifier-property-scale;
        }
      }
    }

    & when not (@screen-size = null) {

      & when not (@@element-property-screen-size = null) {

        & when (@modifier = null) {
          @{property}: @@element-property-screen-size;
        }

        & when not (@modifier = null) {

          & when not (@@element-modifier-property-scale = null) {
            @{property}: @@element-property-screen-size * @@element-modifier-property-scale;
          }
        }
      }
    }
  }
}

/* Clearfix */

.clearfix {
  //*zoom: 1;

  &:before,
  &:after {
    content: ' ';
    display: table;
  }

  &:after {
    clear: both;
  }
}

/* IE7 Fixes */

.ie7-inline-block() {
  display: inline;
  zoom: 1;
}

.ie7-restore-left-whitespace() {
  margin-left: 0.3em;

  &:first-child {
    margin-left: 0;
  }
}

.ie7-restore-right-whitespace() {
  margin-right: 0.3em;
}

/* Focus */

.tab-focus() {
  outline: thin dotted #333;
  outline-offset: -2px;
}

/* Center Block Elements */

.center-block() {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

/* Sizing */

.size(@width; @height) {
  height: @height;
  width: @width;
}

.square(@size) {
  .size(@size; @size);
}

.backface-visibility(@visibility) {
  backface-visibility: @visibility;
}

.background-clip(@clip) {
  background-clip: @clip;
}

.background-size(@size) {
  background-size: @size;
}

.box-sizing-padding-vertical(@height, @content-height) when (@height > @content-height) {
  padding-bottom: ((@height - @content-height) / 2);
  padding-top: ((@height - @content-height) / 2);
}

.box-sizing-padding-vertical(@height, @content-height) when (@height <= @content-height) {
  padding-bottom: 0;
  padding-top: 0;
}

/* Transformations */

.transform(@transform) {
  transform: @transform;
}

.rotate(@degrees) {
  transform: rotate(@degrees);
}

.scale(@ratio) {
  transform: scale(@ratio);
}

.scale(@ratio-x, @ratio-y) {
  transform: scale(@ratio-x, @ratio-y);
}

.scale3d(@ratio-x, @ratio-y, @ratio-z) {
  transform: scale3d(@ratio-x, @ratio-y, @ratio-z);
}

.translate(@x, @y) {
  transform: translate(@x, @y);
}

.translateX(@x) {
  transform: translateX(@x);
}

.translateY(@y) {
  transform: translateY(@y);
}

.translateZ(@z) {
  transform: translateZ(@z);
}

.skew(@x, @y) {
  backface-visibility: hidden;
  transform: skew(@x, @y);
}

.translate3d(@x, @y, @z) {
  transform: translate3d(@x, @y, @z);
}

/* Generate Index Suffixed Properties for Flex Items */

.flex-item-property-loop (@class, @property, @screen, @index, @end) when (@index >= @end) {

  @class-name: replace(e('@{class}-@{index}-@{screen}'), '-null', '');

  .@{class-name} {
    @{property}: @index;
  }

  .flex-item-property-loop(@class, @property, @screen, @index - 1, @end);
}

/* Row */

.row(@screen-size) {

  .row(@screen-size, null);
}

.row(@screen-size, @variant) {

  @row-class: replace(e('.row-@{variant}'), '-null', '');

  @{row-class} {
    @screen: replace(replace(@screen-size, 'screen-', '-screen-'), 'null', '');
    @gutter-width: replace(e('grid-@{variant}-gutter-width@{screen}'), '-null', '');

    & when not (@@gutter-width = null) {
      margin-left: @@gutter-width * -0.5;
      margin-right: @@gutter-width * -0.5;
    }

    & when not (@variant = null) {

      & > [class*='column-'] {
        padding-left: @@gutter-width * 0.5;
        padding-right: @@gutter-width * 0.5;
      }
    }

    &:extend(.clearfix all);
  }
}

/* Grid */

.grid (@screen-size, @grid-columns-count, @grid-gutter-width) {
  .calculate-grid-columns-padding(@screen-size, @grid-gutter-width);
  .calculate-grid-columns(@screen-size, @grid-columns-count, @grid-columns-count, width);
  .calculate-grid-columns(@screen-size, @grid-columns-count, @grid-columns-count, push);
  .calculate-grid-columns(@screen-size, @grid-columns-count, @grid-columns-count, pull);
  .calculate-grid-columns(@screen-size, @grid-columns-count, @grid-columns-count, offset);
}

/* Column Padding */

.calculate-grid-columns-padding(@screen-size, @grid-gutter-width) {

  & when (@screen-size = null) and not (@grid-gutter-width = null) {

    [class*='column-'] {
      min-height: 1px;
      padding-left: @grid-gutter-width * 0.5;
      padding-right: @grid-gutter-width * 0.5;
      position: relative;
    }
  }

  & when not (@screen-size = null) and not (@grid-gutter-width = null) {

    [class*='column-'] {
      padding-left: @grid-gutter-width * 0.5;
      padding-right: @grid-gutter-width * 0.5;
    }
  }
}

/* Calculate Grid Columns */

.calculate-grid-columns(@screen-size, @column-index, @grid-columns-count, @attribute) when (@column-index >= 0) {
  .calculate-grid-column(@screen-size, @column-index, @grid-columns-count, @attribute);
  .calculate-grid-columns(@screen-size, (@column-index - 1), @grid-columns-count, @attribute);
}

/* Calculate Grid Column Width */

.calculate-grid-column(@screen-size, @column-index, @grid-columns-count, @attribute) when (@attribute = width) {

  @screen: replace(replace(@screen-size, 'screen-', '-'), 'null', '');

  .column@{screen}-@{column-index} {
    float: left;
    width: percentage((@column-index / @grid-columns-count));
  }
}

/* Calculate Grid Column Push */

.calculate-grid-column(@screen-size, @column-index, @grid-columns-count, @attribute) when (@attribute = push) {

  @screen: replace(replace(@screen-size, 'screen-', '-'), 'null', '');

  & when (@column-index = 0) {

    .column@{screen}-push-@{column-index} {
      left: auto;
    }
  }

  & when (@column-index > 0) {

    .column@{screen}-push-@{column-index} {
      left: percentage((@column-index / @grid-columns-count));
    }
  }
}

/* Calculate Grid Column Pull */

.calculate-grid-column(@screen-size, @column-index, @grid-columns-count, @attribute) when (@attribute = pull) {

  @screen: replace(replace(@screen-size, 'screen-', '-'), 'null', '');

  & when (@column-index = 0) {

    .column@{screen}-pull-@{column-index} {
      right: auto;
    }
  }

  & when (@column-index > 0) {

    .column@{screen}-pull-@{column-index} {
      right: -1 * percentage((@column-index / @grid-columns-count));
    }
  }
}

/* Calculate Grid Column Push */

.calculate-grid-column(@screen-size, @column-index, @grid-columns-count, @attribute) when (@attribute = offset) {

  @screen: replace(replace(@screen-size, 'screen-', '-'), 'null', '');

  & when (@column-index > 0) {

    .column@{screen}-offset-@{column-index} {
      margin-left: percentage((@column-index / @grid-columns-count));
    }
  }
}

/* Single Corner Border Radius */

.border-top-left-radius(@radius) {
  border-top-left-radius: @radius;
}

.border-top-right-radius(@radius) {
  border-top-right-radius: @radius;
}

.border-bottom-right-radius(@radius) {
  border-bottom-right-radius: @radius;
}

.border-bottom-left-radius(@radius) {
  border-bottom-left-radius: @radius;
}

/* Single Side Border Radius */

.border-top-radius(@radius) {
  .border-top-right-radius(@radius);
  .border-top-left-radius(@radius);
}

.border-right-radius(@radius) {
  .border-top-right-radius(@radius);
  .border-bottom-right-radius(@radius);
}

.border-bottom-radius(@radius) {
  .border-bottom-right-radius(@radius);
  .border-bottom-left-radius(@radius);
}

.border-left-radius(@radius) {
  .border-top-left-radius(@radius);
  .border-bottom-left-radius(@radius);
}
